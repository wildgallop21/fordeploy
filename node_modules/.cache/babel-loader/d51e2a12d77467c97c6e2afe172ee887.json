{"ast":null,"code":"import axios from \"axios\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  reviews: [],\n  isLoading: false,\n  error: null\n};\nexport const __getReviews = createAsyncThunk(\"reviews/getReviews\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/reviews\");\n    console.log(data);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    console.log(error);\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __postReviews = createAsyncThunk(\"reviews/postReviews\", async (payload, thunkAPI) => {\n  try {\n    const data = await axios.get(\"http://localhost:3001/reviews\");\n    console.log(data);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    console.log(error);\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const reviewsSlice = createSlice({\n  name: \"reviews\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [__getReviews.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getReviews.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.reviews = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getReviews.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  }\n}); // // 액션크리에이터는 컴포넌트에서 사용하기 위해 export 하고\n// export const { addNumber, minusNumber } = reviewSlice.actions;\n// // reducer 는 configStore에 등록하기 위해 export default 합니다.\n// export default reviewSlice.reducer;\n\nexport const {} = reviewsSlice.actions;\nexport default reviewsSlice.reducer;","map":{"version":3,"names":["axios","createAsyncThunk","createSlice","initialState","reviews","isLoading","error","__getReviews","payload","thunkAPI","data","get","console","log","fulfillWithValue","rejectWithValue","__postReviews","reviewsSlice","name","reducers","extraReducers","pending","state","fulfilled","action","rejected","actions","reducer"],"sources":["/Users/dayoon_sohn/Desktop/sparta/reactredux/react-lastweek/ALIKE-d-MOVIE-MOVIE/alikemovie/src/Redux/modules/reviewSlice.js"],"sourcesContent":["import axios from \"axios\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  reviews: [],\n  isLoading: false,\n  error: null,\n\n};\n\nexport const __getReviews = createAsyncThunk(\n  \"reviews/getReviews\",\n  async (payload, thunkAPI) => {\n    try{\n      const data = await axios.get(\"http://localhost:3001/reviews\");\n      console.log(data);\n      return thunkAPI.fulfillWithValue(data.data);\n\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.rejectWithValue(error);\n    }\n\n  }\n);\n\n\nexport const __postReviews = createAsyncThunk(\n  \"reviews/postReviews\",\n  async (payload, thunkAPI) => {\n    try{\n      const data = await axios.get(\"http://localhost:3001/reviews\");\n      console.log(data);\n      return thunkAPI.fulfillWithValue(data.data);\n\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.rejectWithValue(error);\n    }\n\n  }\n);\n\n\n  export const reviewsSlice = createSlice({\n  name: \"reviews\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n      [__getReviews.pending]: (state) => {\n        state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n      },\n      [__getReviews.fulfilled]: (state, action) => {\n        state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n        state.reviews = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n      },\n      [__getReviews.rejected]: (state, action) => {\n        state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n        state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n      },\n  },\n});\n\n\n\n\n// // 액션크리에이터는 컴포넌트에서 사용하기 위해 export 하고\n// export const { addNumber, minusNumber } = reviewSlice.actions;\n// // reducer 는 configStore에 등록하기 위해 export default 합니다.\n// export default reviewSlice.reducer;\n\n\nexport const {} = reviewsSlice.actions;\nexport default reviewsSlice.reducer;"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;EACnBC,OAAO,EAAE,EADU;EAEnBC,SAAS,EAAE,KAFQ;EAGnBC,KAAK,EAAE;AAHY,CAArB;AAOA,OAAO,MAAMC,YAAY,GAAGN,gBAAgB,CAC1C,oBAD0C,EAE1C,OAAOO,OAAP,EAAgBC,QAAhB,KAA6B;EAC3B,IAAG;IACD,MAAMC,IAAI,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,+BAAV,CAAnB;IACAC,OAAO,CAACC,GAAR,CAAYH,IAAZ;IACA,OAAOD,QAAQ,CAACK,gBAAT,CAA0BJ,IAAI,CAACA,IAA/B,CAAP;EAED,CALD,CAKE,OAAOJ,KAAP,EAAc;IACdM,OAAO,CAACC,GAAR,CAAYP,KAAZ;IACA,OAAOG,QAAQ,CAACM,eAAT,CAAyBT,KAAzB,CAAP;EACD;AAEF,CAbyC,CAArC;AAiBP,OAAO,MAAMU,aAAa,GAAGf,gBAAgB,CAC3C,qBAD2C,EAE3C,OAAOO,OAAP,EAAgBC,QAAhB,KAA6B;EAC3B,IAAG;IACD,MAAMC,IAAI,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAU,+BAAV,CAAnB;IACAC,OAAO,CAACC,GAAR,CAAYH,IAAZ;IACA,OAAOD,QAAQ,CAACK,gBAAT,CAA0BJ,IAAI,CAACA,IAA/B,CAAP;EAED,CALD,CAKE,OAAOJ,KAAP,EAAc;IACdM,OAAO,CAACC,GAAR,CAAYP,KAAZ;IACA,OAAOG,QAAQ,CAACM,eAAT,CAAyBT,KAAzB,CAAP;EACD;AAEF,CAb0C,CAAtC;AAiBL,OAAO,MAAMW,YAAY,GAAGf,WAAW,CAAC;EACxCgB,IAAI,EAAE,SADkC;EAExCf,YAFwC;EAGxCgB,QAAQ,EAAE,EAH8B;EAIxCC,aAAa,EAAE;IACX,CAACb,YAAY,CAACc,OAAd,GAAyBC,KAAD,IAAW;MACjCA,KAAK,CAACjB,SAAN,GAAkB,IAAlB,CADiC,CACT;IACzB,CAHU;IAIX,CAACE,YAAY,CAACgB,SAAd,GAA0B,CAACD,KAAD,EAAQE,MAAR,KAAmB;MAC3CF,KAAK,CAACjB,SAAN,GAAkB,KAAlB,CAD2C,CAClB;;MACzBiB,KAAK,CAAClB,OAAN,GAAgBoB,MAAM,CAAChB,OAAvB,CAF2C,CAEX;IACjC,CAPU;IAQX,CAACD,YAAY,CAACkB,QAAd,GAAyB,CAACH,KAAD,EAAQE,MAAR,KAAmB;MAC1CF,KAAK,CAACjB,SAAN,GAAkB,KAAlB,CAD0C,CACjB;;MACzBiB,KAAK,CAAChB,KAAN,GAAckB,MAAM,CAAChB,OAArB,CAF0C,CAEZ;IAC/B;EAXU;AAJyB,CAAD,CAAhC,C,CAsBT;AACA;AACA;AACA;;AAGA,OAAO,MAAM,KAAKS,YAAY,CAACS,OAAxB;AACP,eAAeT,YAAY,CAACU,OAA5B"},"metadata":{},"sourceType":"module"}