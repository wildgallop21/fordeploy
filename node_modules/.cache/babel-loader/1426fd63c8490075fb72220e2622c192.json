{"ast":null,"code":"import axios from \"axios\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst url2 = `http://localhost:3001/comments`;\nconst initialState = {\n  // comments: [],\n  isLoading: false,\n  error: null\n};\nexport const __postComments = createAsyncThunk(\"comments/postComments\", async (payload, thunkAPI) => {\n  try {\n    // const data = await axios.post(\"http://localhost:3001/comments\");\n    const data = await axios.post(url2, payload // reviewsId:payload.reviewsId,\n    // comment: payload.comment,\n    );\n    console.log(data);\n    return thunkAPI.fulfillWithValue(data.data);\n  } catch (error) {\n    console.log(error);\n    return thunkAPI.rejectWithValue(error);\n  }\n});\nexport const __getComments = createAsyncThunk(\"comments/getComments\", async (payload, thunkAPI) => {\n  try {\n    // const data = await axios.get(\"http://localhost:3001/comments\");\n    // const data = await axios.get(`${url2}+?reviewId=${payload}`);\n    const data = await axios.get(url2); // const data = await axios.get(url2+\"/\"+payload);\n    // /comments 앞에부분 변수 할당해서 코드 줄이는 방법도 있음\n\n    console.log(data);\n    return thunkAPI.fulfillWithValue(data.data); // console.log(data);\n  } catch (error) {\n    console.log(error);\n    return thunkAPI.rejectWithValue(error);\n  }\n}); // export const updateUser2 = createAsyncThunk(\n//   \"users/update\", \n//   async (user) => {\n//   const response = await axios.post(\n//     \"http://localhost:8800/api/users/1/update\",\n//     user\n//   );\n//   return response.data;\n// });\n// export const loginUser = createAsyncThunk(\n//   \"auth/login\",\n//   async (authData) => {\n//     const response = axios.post(\"auth/token/login/\", {\n//       email: authData.email,\n//       password: authData.password,\n//     });\n//     return response.data;\n//   },\n//   {\n//     condition: (authData, { getState, extra }) => {\n//       const { auth } = getState();\n//       if ([\"fulfilled\", \"loading\"].includes(auth.status)) {\n//         return false;\n//       }\n//     },\n//   }\n// );\n\nexport const commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n    [__getComments.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__getComments.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.reviews = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__getComments.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    },\n    [__postComments.pending]: state => {\n      state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n    },\n    [__postComments.fulfilled]: (state, action) => {\n      state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.reviews = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n    },\n    [__postComments.rejected]: (state, action) => {\n      state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n\n      state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n    }\n  }\n}); // // 액션크리에이터는 컴포넌트에서 사용하기 위해 export 하고\n// export const { addNumber, minusNumber } = reviewSlice.actions;\n// // reducer 는 configStore에 등록하기 위해 export default 합니다.\n// export default reviewSlice.reducer;\n\nexport const {} = commentsSlice.actions;\nexport default commentsSlice.reducer;","map":{"version":3,"names":["axios","createAsyncThunk","createSlice","url2","initialState","isLoading","error","__postComments","payload","thunkAPI","data","post","console","log","fulfillWithValue","rejectWithValue","__getComments","get","commentsSlice","name","reducers","extraReducers","pending","state","fulfilled","action","reviews","rejected","actions","reducer"],"sources":["/Users/dayoon_sohn/Desktop/sparta/reactredux/react-lastweek/ALIKE-d-MOVIE-MOVIE/alikemovie/src/Redux/modules/commentSlice.js"],"sourcesContent":["import axios from \"axios\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\n\nconst url2 = `http://localhost:3001/comments`\n\n\nconst initialState = {\n  // comments: [],\n  isLoading: false,\n  error: null,\n\n};\nexport const __postComments = createAsyncThunk(\n  \"comments/postComments\",\n  async (payload, thunkAPI) => {\n    try {\n      // const data = await axios.post(\"http://localhost:3001/comments\");\n    \n      const data = await axios.post(url2,\n        payload\n        // reviewsId:payload.reviewsId,\n        // comment: payload.comment,\n      )\n      console.log(data);\n      return thunkAPI.fulfillWithValue(data.data);\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.rejectWithValue(error);\n    }\n  }\n);\n\nexport const __getComments = createAsyncThunk(\n  \"comments/getComments\",\n  async (payload, thunkAPI) => {\n    try {\n      // const data = await axios.get(\"http://localhost:3001/comments\");\n      // const data = await axios.get(`${url2}+?reviewId=${payload}`);\n      const data = await axios.get(url2);\n      // const data = await axios.get(url2+\"/\"+payload);\n\n      // /comments 앞에부분 변수 할당해서 코드 줄이는 방법도 있음\n      console.log(data);\n      return thunkAPI.fulfillWithValue(data.data);\n      // console.log(data);\n    } catch (error) {\n      console.log(error);\n      return thunkAPI.rejectWithValue(error);\n    }\n\n  }\n);\n// export const updateUser2 = createAsyncThunk(\n//   \"users/update\", \n//   async (user) => {\n//   const response = await axios.post(\n//     \"http://localhost:8800/api/users/1/update\",\n//     user\n//   );\n//   return response.data;\n// });\n// export const loginUser = createAsyncThunk(\n//   \"auth/login\",\n//   async (authData) => {\n//     const response = axios.post(\"auth/token/login/\", {\n//       email: authData.email,\n//       password: authData.password,\n//     });\n//     return response.data;\n//   },\n//   {\n//     condition: (authData, { getState, extra }) => {\n//       const { auth } = getState();\n//       if ([\"fulfilled\", \"loading\"].includes(auth.status)) {\n//         return false;\n//       }\n//     },\n//   }\n// );\n\n\nexport const commentsSlice = createSlice({\n  name: \"comments\",\n  initialState,\n  reducers: {},\n  extraReducers: {\n      [__getComments.pending]: (state) => {\n        state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n      },\n      [__getComments.fulfilled]: (state, action) => {\n        state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n        state.reviews = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n      },\n      [__getComments.rejected]: (state, action) => {\n        state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n        state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n      },\n      [__postComments.pending]: (state) => {\n        state.isLoading = true; // 네트워크 요청이 시작되면 로딩상태를 true로 변경합니다.\n      },\n      [__postComments.fulfilled]: (state, action) => {\n        state.isLoading = false; // 네트워크 요청이 끝났으니, false로 변경합니다.\n        state.reviews = action.payload; // Store에 있는 todos에 서버에서 가져온 todos를 넣습니다.\n      },\n      [__postComments.rejected]: (state, action) => {\n        state.isLoading = false; // 에러가 발생했지만, 네트워크 요청이 끝났으니, false로 변경합니다.\n        state.error = action.payload; // catch 된 error 객체를 state.error에 넣습니다.\n      },\n\n  },\n});\n\n// // 액션크리에이터는 컴포넌트에서 사용하기 위해 export 하고\n// export const { addNumber, minusNumber } = reviewSlice.actions;\n// // reducer 는 configStore에 등록하기 위해 export default 합니다.\n// export default reviewSlice.reducer;\n\nexport const {} = commentsSlice.actions;\nexport default commentsSlice.reducer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}